# ===============================
# Application Configuration
# ===============================
# Define the application name and port
spring.application.name=${SPRING_APPLICATION_NAME}
server.port=${SERVER_PORT}
app.base-url=${APP_BASE_URL}


# ===============================
# HTTP/2 Configuration
# ===============================
# Enable HTTP/2 support for improved performance
server.http2.enabled=${SERVER_HTTP2_ENABLED}

# ===============================
# gRPC Server Configuration
# ===============================
# gRPC server settings
grpc.server.port=${GRPC_SERVER_PORT}
grpc.server.security.enabled=${GRPC_SERVER_SECURITY_ENABLED}

# ===============================
# Database Configuration
# ===============================
# PostgreSQL database connection details
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}

# JPA/Hibernate settings for ORM
spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL}
spring.jpa.properties.hibernate.format_sql=${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL}

# ===============================
# JWT Configuration
# ===============================
# JSON Web Token settings for authentication
security.jwt.secret-key=${SECURITY_JWT_SECRET_KEY}
security.jwt.expiration-time=${SECURITY_JWT_EXPIRATION_TIME}
security.jwt.reset-token-expiration-time=900000


# ===============================
# Mail Configuration
# ===============================
# Email server settings for sending emails
spring.mail.host=${SPRING_MAIL_HOST}
spring.mail.port=${SPRING_MAIL_PORT}
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH}
spring.mail.properties.mail.smtp.starttls.enable=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE}

# ===============================
# Protobuf and gRPC Configuration
# ===============================
# gRPC client configuration for communication between services
grpc.client.message-service.address=static://localhost:9191
grpc.client.message-service.enable-keep-alive=true

grpc.client.restaurant-service.address=static://localhost:9191
grpc.client.restaurant-service.negotiationType=plaintext
grpc.client.restaurant-service.enable-keep-alive=true
grpc.client.restaurant-service.keep-alive-without-calls=true

# ===============================
# Kafka Configuration
# ===============================
# Kafka broker settings
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}

# Kafka consumer settings
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID}
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Kafka producer settings
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka topics
kafka.topic.order-status=${KAFKA_TOPIC_ORDER_STATUS}
kafka.topic.rider-request=${KAFKA_TOPIC_RIDER_REQUEST}
kafka.topic.customer-orders=${KAFKA_TOPIC_CUSTOMER_ORDERS}

# ===============================
# Redis Cache Configuration
# ===============================
# Redis connection details
spring.data.redis.host=${SPRING_DATA_REDIS_HOST}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT}
#spring.data.redis.password=your_password_here # Uncomment if Redis requires a password

# Redis cache settings (optional)
#spring.cache.type=redis                  # Enable Redis-based caching
#spring.cache.redis.time-to-live=3600000 # Cache expiration time (in milliseconds)

#spring.cache.type=caffeine
#spring.cache.cache-names=menuItems,restaurants,menus
#spring.cache.caffeine.spec=maximumSize=1000,expireAfterWrite=10m
#

# ===============================
# Optional Environment Properties
# ===============================
# Import environment-specific configurations (e.g., .env files)
spring.config.import=optional:file:.env[.properties]

# ===============================
# Logging Configuration
# ===============================
# Uncomment to enable logging configuration
# logging.level.root=${LOGGING_LEVEL_ROOT}
# logging.level.org.springframework=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK}
# logging.file.name=${LOGGING_FILE_NAME}